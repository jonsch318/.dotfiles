return {}

-- return {
--     {
--         "akinsho/bufferline.nvim",
--         event = "VeryLazy",
--         dependencies = "nvim-tree/nvim-web-devicons",
--         keys = {
--             { "<leader>bp", "<Cmd>BufferLineTogglePin<CR>", desc = "Toggle pin" },
--             { "<leader>bP", "<Cmd>BufferLineGroupClose ungrouped<CR>", desc = "Delete non-pinned buffers" },
--             { "<leader>bo", "<Cmd>BufferLineCloseOthers<CR>", desc = "Delete other buffers" },
--             { "<leader>br", "<Cmd>BufferLineCloseRight<CR>", desc = "Delete buffers to the right" },
--             { "<leader>bl", "<Cmd>BufferLineCloseLeft<CR>", desc = "Delete buffers to the left" },
--             { "<S-h>", "<cmd>BufferLineCyclePrev<cr>", desc = "Prev buffer" },
--             { "<S-l>", "<cmd>BufferLineCycleNext<cr>", desc = "Next buffer" },
--             { "[b", "<cmd>BufferLineCyclePrev<cr>", desc = "Prev buffer" },
--             { "]b", "<cmd>BufferLineCycleNext<cr>", desc = "Next buffer" },
--         },
--         opts = {
--             options = {
--                 close_command = function(n)
--                     require("mini.bufremove").delete(n, false)
--                 end,
--                 diagnostics = "nvim_lsp",
--                 always_show_bufferline = false,
--                 offsets = {
--                     {
--                         filetype = "neo-tree",
--                         text = "Neo-tree",
--                         highlight = "Directory",
--                         text_align = "left",
--                     },
--                 },
--                 numbers = "ordinal",
--                 --- count is an integer representing total count of errors
--                 --- level is a string "error" | "warning"
--                 --- diagnostics_dict is a dictionary from error level ("error", "warning" or "info")to number of errors for each level.
--                 --- this should return a string
--                 --- Don't get too fancy as this function will be executed a lot
--                 diagnostics_indicator = function(count, level, diagnostics_dict, context)
--                     local icon = level:match("error") and " " or " "
--                     return " " .. icon .. count
--                 end,
--             },
--         },
--         config = function(_, opts)
--             require("bufferline").setup(opts)
--             -- Fix bufferline when restoring a session
--             -- vim.api.nvim_create_autocmd("BufAdd", {
--             --     callback = function()
--             --         vim.schedule(function()
--             --             pcall(nvim_bufferline)
--             --         end)
--             --     end,
--             -- })
--         end,
--     },
-- }
